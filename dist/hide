#!/usr/bin/env node

!function(e){var t={};function a(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=t,a.d=function(e,t,r){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(r,n,function(t){return e[t]}.bind(null,n));return r},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=5)}([function(e,t){e.exports=require("fs")},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r={filepath:process.env.NODE_HIDE_FILEPATH||process.env["win32"==process.platform?"USERPROFILE":"HOME"]||".",filename:process.env.NODE_HIDE_FILENAME||"__node-hide-accounts",cryptography:{password:process.env.CRYPT_SECRET}};t.default=r},function(e,t){e.exports=require("path")},function(e,t,a){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(a(0)),s=r(a(2)),i=r(a(4)),o=r(a(1)),u=n.default.promises.mkdir,c=n.default.promises.writeFile,l=n.default.promises.readFile,d=i.default();t.default={filepath:s.default.join(o.default.filepath,o.default.filename),async getAndDecryptFlatFile(){if(this.doesDirectoryExist(o.default.filepath)){if(!this.doesFileExist(this.filepath))return await c(this.filepath,""),null;{const e=await l(this.filepath,"utf-8");if(0===e.length)return null;try{return JSON.parse(await d.decrypt(e))}catch(e){throw`We're having a problem parsing your flat file at '${this.filepath}'.\n              This is likely due to a different master password, environment variable CRYPT_SECRET,\n              being used that previously was set. Make sure you have the correct\n              secret you used before and try again.`.replace(/\n\s+/g,"\n")}}}return await u(o.default.filepath),await c(this.filepath,""),""},async writeObjToFile(e,t={}){const a=Object.assign(t,e),r=await d.encrypt(JSON.stringify(a));return await c(this.filepath,r)},doesDirectoryExist(e){try{return n.default.statSync(e).isDirectory()}catch(e){return!1}},doesFileExist(e){try{return n.default.statSync(e).isFile()}catch(e){return!1}}}},function(e,t,a){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(a(10)),s=r(a(0)),i=a(11),o=r(a(12)),u=r(a(1)),c=s.default.promises.readFile,l=i.promisify(o.default.inflate),d=i.promisify(o.default.deflate);function f(e){const t=n.default.createHash("sha256");return t.update(e),t.digest("base64")}function p(e,t){const a=t||n.default.randomBytes(16);return{iv:a,key:n.default.pbkdf2Sync(e,a,1e5,32,"sha256")}}t.default=function(e={}){return{_algorithm:"aes-256-ctr",_secret:e.secret||u.default.cryptography.password,async encrypt(e){const t=f(this._secret),{iv:a,key:r}=p(t),s=n.default.createCipheriv(this._algorithm,r,a),i=e instanceof Buffer?e.toString("base64"):e;let o=s.update(i,"utf8","base64");return o+=s.final("base64"),await this.parseData(`${o}:${a.toString("base64")}`)},async encryptFileUtf8(e){const t=await c(e,{encoding:"utf8"});return await this.encrypt(t)},async decrypt(e){const t=(await this.parseData(e,!1)).toString(),[a,r]=t.split(":"),s=Buffer.from(r,"base64"),i=f(this._secret),{key:o}=p(i,s),u=n.default.createDecipheriv(this._algorithm,o,s);let c=u.update(a,"base64","utf8");return c+=u.final("utf8"),c},async decryptFileUtf8(e){const t=await c(e,{encoding:"utf8"});return await this.decrypt(t)},fileToHash:async e=>await new Promise((t,a)=>{const r=n.default.createHash("sha256"),i=s.default.createReadStream(e);i.on("data",e=>r.update(e)),i.on("error",a),i.on("end",()=>t(r.digest("base64")))}),async parseData(e,t=!0){switch(t){case!1:return await l(Buffer.from(e,"base64"));default:const t=await d(e);return Buffer.from(t).toString("base64")}}}}},function(e,t,a){e.exports=a(6)},function(e,t,a){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(a(7)),s=r(a(0)),i=r(a(2)),o=r(a(8)),u=r(a(4)),c=r(a(3)),l=r(a(13)),d=r(a(15)),f=r(a(17)),p=r(a(1)),y=s.default.promises.writeFile,h=n.default(process.argv.slice(2)),[w,m]=h._;p.default.cryptography.password||["file","version"].includes(w)||(f.default.noCryptSecret(),process.exit()),(async()=>{try{const e=h.e||h.extra,t=h.n||h.name,r=h.p||h.password,n=h.i||h.id||h.uuid,s=h.u||h.username,g=h.t||h.text,b=h.f||h.file,_=u.default(),v=i.default.join(p.default.filepath,p.default.filename);switch(w){case"file":f.default.twoLinesDifferentColors("Your encrypted file is in the following location:",v,"blue","green");break;case"version":f.default.success(a(20)("package.json").version,!1);break;case"add":const w=t||m;if(!w)return f.default.error("An account name (-n or --name) parameter is a required at a minimum to add a new account.");await o.default.addAccount(w,s,r,e),f.default.success(`Successfully added account '${w}'!`);break;case"delete":if(!n)return f.default.error("A uuid (-i or --id or --uuid) is a required to delete an account.");if(await o.default.deleteAccountByUuid(n))return f.default.success(`Successfully deleted account with uuid: '${n}'`);f.default.error(`We didn't find an account with uuid: '${n}'`);break;case"search":const F=h.s||h.search||m,x=await c.default.getAndDecryptFlatFile(),A=await o.default.searchForAccountsByName(F,x),S=await o.default.searchForAccountsByUsername(F,x),O={matches:[].concat(A.matches).concat(S.matches).sort(o.default.sortByName).reduce((e,t)=>(-1===e.indexOf(t)&&e.push(t),e),[]),total:A.total};f.default.listAccounts(O.matches,O.total);break;case"show":if(n){const e=await o.default.findAccountByUuid(n);return e?(r||delete e.password,f.default.listSingleAccount(e)):f.default.error("We didn't find an account with uuid: "+n)}if(t||m){const e=t||m,a=await o.default.findAccountByName(e);return a?(r||delete a.password,f.default.listSingleAccount(a)):f.default.error("We didn't find an account with name: "+e)}f.default.error("Either a name (-n or --name) or uuid (-i or --id or --uuid) parameter is a required at a minimum to show the details for an account.");break;case"update":if(n){const a=await o.default.findAccountByUuid(n);return a?(await o.default.updateAccount(n,{name:t,username:s,password:r,extra:e},a),f.default.success(`Successfully updated account with uuid: '${n}'!`)):f.default.error("We didn't find an account with uuid: "+n)}if(t){const a=await o.default.findAccountByName(t);return a?(await o.default.updateAccount(a.uuid,{name:t,username:s,password:r,extra:e},a),f.default.success(`Successfully updated account with name: '${t}'!`)):f.default.error("We didn't find an account with name: "+t)}f.default.error("Either a name (-n or --name) or uuid (-i or --id or --uuid) parameter is a required at a minimum to show the details for an account.");break;case"decryptfile":if("yes"===(await d.default().ask("Are you sure you want to decrypt your file and save it to disk (yes/no): ")).toLowerCase()){const e=v+".json",t=await c.default.getAndDecryptFlatFile();await y(e,JSON.stringify(t)),f.default.success("Successfully saved your decrypted account data to:\n"+e)}break;case"recrypt":const D=i.default.join(p.default.filepath,p.default.filename),j=u.default({secret:m}),E=await c.default.getAndDecryptFlatFile(),P=await j.encrypt(JSON.stringify(E));await y(D,P),f.default.success("Successfully updated your encrypted file with new secret to: "+D);break;case"import":const k=h.f||h.filepath||m;if(k&&c.default.doesFileExist(k)){let e=await l.default.csv(k),t=0,a=0;const r=e.length;for(;e.length>0;){const r=e.shift();r.name?(t++,await o.default.addAccount(r.name,r.username,r.password,r.extra)):a++}const n=`Successfully added ${t} accounts from CSV: ${k}!`,s=a>0?`Did not add ${a} accounts because we didn't see an account name ('name' CSV header).`:"";return f.default.twoLinesDifferentColors(n,s,"green","red"),f.default.singleLine(`Total number of rows in spreadsheet: ${r}\n`,"blue",0)}f.default.error("We can't find filepath provided: "+(k||"NO FILE PROVIDED"));break;case"encrypt":const B=g||m;let C;B?(C=await _.encrypt(B),f.default.success(C.toString())):b?(C=await _.encryptFileUtf8(b),f.default.success(C.toString())):f.default.error("Please enter text (-t or --text) or a file path (-f or --file) to encrypt text.");break;case"decrypt":const N=g||m;let T;N?(T=await _.decrypt(N),f.default.success(T)):b?(T=await _.decryptFileUtf8(b),f.default.success(T)):f.default.error("Please enter text (-t or --text) or a file path (-f or --file) to encrypt text.");break;default:f.default.error("I don't recognize what you are trying to do.\nPlease refer to the documentation for what commands I support.")}process.exit()}catch(e){"string"==typeof e?f.default.error(e):"TypeError: Bad input string"==e.toString()?(f.default.error(`Uh oh, The error we got is '${e.toString()}'\n\nThis usually means the CRYPT_SECRET is different for the info you're trying to decrypt than was used to encrypt it. Full stack trace below.`),console.log(e)):console.log(e),process.exit()}})()},function(e,t){e.exports=require("minimist")},function(e,t,a){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=a(9),s=r(a(3));t.default={createUuid:()=>n.v4(),async addAccount(e,t,a,r=""){const n={[this.createUuid()]:{name:e,username:t||"",password:a||"",extra:r||""}},i=await s.default.getAndDecryptFlatFile();return await s.default.writeObjToFile(n,i||{})},async updateAccount(e,t={},a={}){const r={[e]:{name:t.name||a.name||"",username:t.username||a.username||"",password:t.password||a.password||"",extra:t.extra||a.extra||""}},n=await s.default.getAndDecryptFlatFile();return await s.default.writeObjToFile(r,n||{})},async deleteAccountByUuid(e){let t=await s.default.getAndDecryptFlatFile();return!(!t||!t[e])&&(delete t[e],await s.default.writeObjToFile({},t),!0)},async findAccountByUuid(e){const t=await s.default.getAndDecryptFlatFile();return!(!t||!t[e])&&Object.assign(t[e],{uuid:e})},async findAccountByName(e){const t=await s.default.getAndDecryptFlatFile();if(!t)return!1;const a=Object.keys(t).filter(a=>t[a].name.toLowerCase()==e.toLowerCase())[0];return!!a&&Object.assign(t[a],{uuid:a})},async searchForAccountsByName(e,t){return await this.searchForAccountsByField("name",e,t)},async searchForAccountsByUsername(e,t){return await this.searchForAccountsByField("username",e,t)},async searchForAccountsByField(e,t,a){if(!(a=a||await s.default.getAndDecryptFlatFile()))return{matches:[],total:0};const r=Object.keys(a),n=r.length;return{matches:r.map(r=>{const n=a[r];if(!n)return null;if(t){const a=new RegExp(t,"i");return n[e]&&a.test(n[e])?Object.assign(n,{uuid:r}):null}return Object.assign(n,{uuid:r})}).filter(e=>!!e),total:n}},sortByName:(e,t)=>e.name.toLowerCase()<t.name.toLowerCase()?-1:1}},function(e,t){e.exports=require("uuid")},function(e,t){e.exports=require("crypto")},function(e,t){e.exports=require("util")},function(e,t){e.exports=require("zlib")},function(e,t,a){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(a(0)),s=r(a(14));t.default={csv:e=>new Promise((t,a)=>{const r=s.default({columns:!0});r.on("error",a),r.on("end",t),n.default.createReadStream(e).pipe(r)})}},function(e,t){e.exports=require("csv-parse")},function(e,t,a){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(a(16));t.default=function(){return{rl:n.default.createInterface({input:process.stdin,output:process.stdout}),ask(e,t=!0){return new Promise(a=>{this.rl.question(e,e=>{a(e),t&&this.close()})})},close(){this.rl.close()}}}},function(e,t){e.exports=require("readline")},function(e,t,a){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),a(18);const n=r(a(19)),s=()=>{};t.default={noCryptSecret(){this.wrapInNewlines(()=>{console.log("You don't have environment variable CRYPT_SECRET set.".red),console.log(">export CRYPT_SECRET=[your all time master secret value]".green)})},listSingleAccount(e){this.wrapInNewlines(()=>console.log(this.columnify([e]).green))},listAccounts(e=[],t=0){const a=e.map(e=>"string"==typeof e?{name:e}:(delete e.password,e));this.wrapInNewlines(()=>{console.log("I found the following accounts:".blue),console.log(this.columnify(a).green),console.log(`${e.length} of ${t} total accounts returned`.blue)})},twoLinesDifferentColors(e,t,a="blue",r="green"){this.wrapInNewlines(()=>{e.length>0&&console.log(e[a]),t.length>0&&console.log(t[r])})},singleLine(e,t="blue",a=1){this.wrapInNewlines(()=>console.log(e[t]),a)},success(e,t=!0){let a=e=>e();t&&(a=this.wrapInNewlines),a(()=>console.log(e.green))},error(e){this.wrapInNewlines(()=>console.log(e.red))},wrapInNewlines(e=s,t=1){const a=t-1>0?new Array(t-1).fill("\n").join(""):"";t>0&&console.log(a),e(),t>0&&console.log(a)},columnify:e=>n.default(e,{minWidth:15})}},function(e,t){e.exports=require("colors")},function(e,t){e.exports=require("columnify")},function(e,t){e.exports=require("root-require")}]);